--- a/jq/builtin.c
+++ b/jq/builtin.c
@@ -135,18 +135,26 @@
     return jv_number(jv_number_value(a) - jv_number_value(b));
   } else if (jv_get_kind(a) == JV_KIND_ARRAY && jv_get_kind(b) == JV_KIND_ARRAY) {
     jv out = jv_array();
+    jv_array_start();
+    int i;
+    jv x;
     jv_array_foreach(a, i, x) {
       int include = 1;
+      jv_array_start();
+      int j;
+      jv y;
       jv_array_foreach(b, j, y) {
         if (jv_equal(jv_copy(x), y)) {
           include = 0;
           break;
         }
       }
+      jv_array_end();
       if (include)
         out = jv_array_append(out, jv_copy(x));
       jv_free(x);
     }
+    jv_array_end();
     jv_free(a);
     jv_free(b);
     return out;
@@ -360,6 +368,9 @@
     if (jv_get_kind(input) != JV_KIND_ARRAY)
       return type_error(input, "cannot be csv-formatted, only array");
     jv line = jv_string("");
+    jv_array_start();
+    int i;
+    jv x;
     jv_array_foreach(input, i, x) {
       if (i) line = jv_string_append_str(line, ",");
       switch (jv_get_kind(x)) {
@@ -391,6 +402,7 @@
         return type_error(x, "is not valid in a csv row");
       }
     }
+    jv_array_end();
     jv_free(input);
     return line;
   } else if (!strcmp(fmt_s, "html")) {
@@ -406,7 +418,8 @@
 
     jv line = jv_string("");
     const char* s = jv_string_value(input);
-    for (int i=0; i<jv_string_length_bytes(jv_copy(input)); i++) {
+    int i;
+    for (i=0; i<jv_string_length_bytes(jv_copy(input)); i++) {
       unsigned ch = (unsigned)(unsigned char)*s;
       if (ch < 128 && unreserved[ch]) {
         line = jv_string_append_buf(line, s, 1);
@@ -422,6 +435,9 @@
     if (jv_get_kind(input) != JV_KIND_ARRAY)
       input = jv_array_set(jv_array(), 0, input);
     jv line = jv_string("");
+    jv_array_start();
+    int i;
+    jv x;
     jv_array_foreach(input, i, x) {
       if (i) line = jv_string_append_str(line, " ");
       switch (jv_get_kind(x)) {
@@ -445,6 +461,7 @@
         return type_error(x, "can not be escaped for shell");
       }
     }
+    jv_array_end();
     jv_free(input);
     return line;
   } else if (!strcmp(fmt_s, "base64")) {
@@ -454,15 +471,16 @@
     const char b64[64 + 1] = CHARS_ALPHANUM "+/";
     const char* data = jv_string_value(input);
     int len = jv_string_length_bytes(jv_copy(input));
-    for (int i=0; i<len; i+=3) {
+    int i, j;
+    for (i=0; i<len; i+=3) {
       uint32_t code = 0;
       int n = len - i >= 3 ? 3 : len-i;
-      for (int j=0; j<3; j++) {
+      for (j=0; j<3; j++) {
         code <<= 8;
         code |= j < n ? (unsigned)data[i+j] : 0;
       }
       char buf[4];
-      for (int j=0; j<4; j++) {
+      for (j=0; j<4; j++) {
         buf[j] = b64[(code >> (18 - j*6)) & 0x3f];
       }
       if (n < 3) buf[3] = '=';
@@ -528,7 +546,8 @@
   }
   jv ret = jv_array_get(jv_copy(values), 0);
   jv retkey = jv_array_get(jv_copy(keys), 0);
-  for (int i=1; i<jv_array_length(jv_copy(values)); i++) {
+  int i;
+  for (i=1; i<jv_array_length(jv_copy(values)); i++) {
     jv item = jv_array_get(jv_copy(keys), i);
     int cmp = jv_cmp(jv_copy(item), jv_copy(retkey));
     if ((cmp < 0) == (is_min == 1)) {
@@ -635,7 +654,8 @@
       {"not", gen_condbranch(gen_const(jv_false()),
                              gen_const(jv_true()))}
     };
-    for (unsigned i=0; i<sizeof(builtin_defs)/sizeof(builtin_defs[0]); i++) {
+    unsigned i;
+    for (i=0; i<sizeof(builtin_defs)/sizeof(builtin_defs[0]); i++) {
       builtins = BLOCK(builtins, gen_function(builtin_defs[i].name, gen_noop(),
                                               builtin_defs[i].code));
     }
@@ -646,7 +666,8 @@
                      gen_call("arg", gen_noop()),
                      gen_op_simple(PATH_END))},
     };
-    for (unsigned i=0; i<sizeof(builtin_def_1arg)/sizeof(builtin_def_1arg[0]); i++) {
+    unsigned i;
+    for (i=0; i<sizeof(builtin_def_1arg)/sizeof(builtin_def_1arg[0]); i++) {
       builtins = BLOCK(builtins, gen_function(builtin_def_1arg[i].name,
                                               gen_param("arg"),
                                               builtin_def_1arg[i].code));
@@ -742,7 +763,8 @@
     block_free(*bb);
     return nerrors;
   }
-  for (int i=(int)(sizeof(jq_builtins)/sizeof(jq_builtins[0]))-1; i>=0; i--) {
+  int i;
+  for (i=(int)(sizeof(jq_builtins)/sizeof(jq_builtins[0]))-1; i>=0; i--) {
     nerrors = builtins_bind_one(jq, bb, jq_builtins[i]);
     assert(!nerrors);
   }
--- a/jq/bytecode.c
+++ b/jq/bytecode.c
@@ -61,10 +61,11 @@
 }
 
 void dump_disassembly(int indent, struct bytecode* bc) {
+  int i;
   if (bc->nclosures > 0) {
     printf("%*s[params: ", indent, "");
     jv params = jv_object_get(jv_copy(bc->debuginfo), jv_string("params"));
-    for (int i=0; i<bc->nclosures; i++) {
+    for (i=0; i<bc->nclosures; i++) {
       if (i) printf(", ");
       jv name = jv_array_get(jv_copy(params), i);
       printf("%s", jv_string_value(name));
@@ -74,7 +75,7 @@
     printf("]\n");
   }
   dump_code(indent, bc);
-  for (int i=0; i<bc->nsubfunctions; i++) {
+  for (i=0; i<bc->nsubfunctions; i++) {
     struct bytecode* subfn = bc->subfunctions[i];
     jv name = jv_object_get(jv_copy(subfn->debuginfo), jv_string("name"));
     printf("%*s%s:%d:\n", indent, "", jv_string_value(name), i);
@@ -99,7 +100,8 @@
   if (op->length > 1) {
     uint16_t imm = bc->code[pc++];
     if (op->op == CALL_JQ) {
-      for (int i=0; i<imm+1; i++) {
+      int i;
+      for (i=0; i<imm+1; i++) {
         uint16_t level = bc->code[pc++];
         uint16_t idx = bc->code[pc++];
         jv name;
@@ -150,7 +152,8 @@
     return;
   jv_mem_free(bc->code);
   jv_free(bc->constants);
-  for (int i=0; i<bc->nsubfunctions; i++)
+  int i;
+  for (i=0; i<bc->nsubfunctions; i++)
     bytecode_free(bc->subfunctions[i]);
   if (!bc->parent)
     symbol_table_free(bc->globals);
--- a/jq/compile.c
+++ b/jq/compile.c
@@ -106,7 +106,8 @@
 }
 
 block gen_location(location loc, block b) {
-  for (inst* i = b.first; i; i = i->next) {
+  inst* i;
+  for (i = b.first; i; i = i->next) {
     if (i->source.start == UNKNOWN_LOCATION.start &&
         i->source.end == UNKNOWN_LOCATION.end) {
       i->source = loc;
@@ -202,7 +203,8 @@
 
 int block_has_only_binders(block binders, int bindflags) {
   bindflags |= OP_HAS_BINDING;
-  for (inst* curr = binders.first; curr; curr = curr->next) {
+  inst* curr;
+  for (curr = binders.first; curr; curr = curr->next) {
     if ((opcode_describe(curr->op)->flags & bindflags) != bindflags) {
       return 0;
     }
@@ -218,7 +220,8 @@
 
   binder.first->bound_by = binder.first;
   int nrefs = 0;
-  for (inst* i = body.first; i; i = i->next) {
+  inst* i;
+  for (i = body.first; i; i = i->next) {
     int flags = opcode_describe(i->op)->flags;
     if ((flags & bindflags) == bindflags &&
         i->bound_by == 0 &&
@@ -238,7 +241,8 @@
 static void block_bind_each(block binder, block body, int bindflags) {
   assert(block_has_only_binders(binder, bindflags));
   bindflags |= OP_HAS_BINDING;
-  for (inst* curr = binder.first; curr; curr = curr->next) {
+  inst* curr;
+  for (curr = binder.first; curr; curr = curr->next) {
     block_bind_subblock(inst_block(curr), body, bindflags);
   }
 }
@@ -252,7 +256,8 @@
   assert(block_has_only_binders(binder, bindflags));
   bindflags |= OP_HAS_BINDING;
   block refd = gen_noop();
-  for (inst* curr; (curr = block_take(&binder));) {
+  inst* curr;
+  for (curr; (curr = block_take(&binder));) {
     block b = inst_block(curr);
     if (block_bind_subblock(b, body, bindflags)) {
       refd = BLOCK(refd, b);
@@ -405,7 +410,8 @@
 }
 
 block gen_cbinding(const struct cfunction* cfunctions, int ncfunctions, block code) {
-  for (int cfunc=0; cfunc<ncfunctions; cfunc++) {
+  int cfunc;
+  for (cfunc=0; cfunc<ncfunctions; cfunc++) {
     inst* i = inst_new(CLOSURE_CREATE_C);
     i->imm.cfunc = &cfunctions[cfunc];
     i->symbol = strdup(i->imm.cfunc->name);
@@ -427,7 +433,8 @@
 
 static int count_cfunctions(block b) {
   int n = 0;
-  for (inst* i = b.first; i; i = i->next) {
+  inst* i;
+  for (i = b.first; i; i = i->next) {
     if (i->op == CLOSURE_CREATE_C) n++;
     n += count_cfunctions(i->subfn);
   }
@@ -439,7 +446,8 @@
 static int expand_call_arglist(struct locfile* locations, block* b) {
   int errors = 0;
   block ret = gen_noop();
-  for (inst* curr; (curr = block_take(b));) {
+  inst* curr;
+  for (; (curr = block_take(b));) {
     if (opcode_describe(curr->op)->flags & OP_HAS_BINDING) {
       if (!curr->bound_by) {
         locfile_locate(locations, curr->source, "error: %s is not defined", curr->symbol);
@@ -459,7 +467,8 @@
       case CLOSURE_CREATE: 
       case CLOSURE_PARAM: {
         block callargs = gen_noop();
-        for (inst* i; (i = block_take(&curr->arglist));) {
+        inst* i;
+        for (; (i = block_take(&curr->arglist));) {
           assert(opcode_describe(i->op)->flags & OP_IS_CALL_PSEUDO);
           block b = inst_block(i);
           switch (i->op) {
@@ -478,7 +487,8 @@
         curr->arglist = callargs;
 
         if (curr->bound_by->op == CLOSURE_CREATE) {
-          for (inst* i = curr->bound_by->arglist.first; i; i = i->next) {
+          inst* i;
+          for (i = curr->bound_by->arglist.first; i; i = i->next) {
             assert(i->op == CLOSURE_PARAM);
             desired_args++;
           }
@@ -487,7 +497,8 @@
       }
 
       case CLOSURE_CREATE_C: {
-        for (inst* i; (i = block_take(&curr->arglist)); ) {
+        inst* i;
+        for (i; (i = block_take(&curr->arglist)); ) {
           assert(i->op == CLOSURE_CREATE); // FIXME
           block body = i->subfn;
           i->subfn = gen_noop();
@@ -530,11 +541,13 @@
   errors += expand_call_arglist(locations, &b);
   b = BLOCK(b, gen_op_simple(RET));
   jv localnames = jv_array();
-  for (inst* curr = b.first; curr; curr = curr->next) {
+  inst* curr;
+  for (curr = b.first; curr; curr = curr->next) {
     if (!curr->next) assert(curr == b.last);
     int length = opcode_describe(curr->op)->length;
     if (curr->op == CALL_JQ) {
-      for (inst* arg = curr->arglist.first; arg; arg = arg->next) {
+      inst* arg;
+      for (arg = curr->arglist.first; arg; arg = arg->next) {
         length += 2;
       }
     }
@@ -566,7 +579,7 @@
   bc->debuginfo = jv_object_set(bc->debuginfo, jv_string("locals"), localnames);
   if (bc->nsubfunctions) {
     bc->subfunctions = jv_mem_alloc(sizeof(struct bytecode*) * bc->nsubfunctions);
-    for (inst* curr = b.first; curr; curr = curr->next) {
+    for (curr = b.first; curr; curr = curr->next) {
       if (curr->op == CLOSURE_CREATE) {
         struct bytecode* subfn = jv_mem_alloc(sizeof(struct bytecode));
         bc->subfunctions[curr->imm.intval] = subfn;
@@ -575,7 +588,8 @@
         subfn->nclosures = 0;
         subfn->debuginfo = jv_object_set(jv_object(), jv_string("name"), jv_string(curr->symbol));
         jv params = jv_array();
-        for (inst* param = curr->arglist.first; param; param = param->next) {
+        inst* param;
+        for (param = curr->arglist.first; param; param = param->next) {
           assert(param->op == CLOSURE_PARAM);
           assert(param->bound_by == param);
           param->imm.intval = subfn->nclosures++;
@@ -596,7 +610,7 @@
   pos = 0;
   jv constant_pool = jv_array();
   int maxvar = -1;
-  if (!errors) for (inst* curr = b.first; curr; curr = curr->next) {
+  if (!errors) for (curr = b.first; curr; curr = curr->next) {
     const struct opcode_description* op = opcode_describe(curr->op);
     if (op->length == 0)
       continue;
@@ -614,7 +628,8 @@
       code[pos++] = nesting_level(bc, curr->bound_by);
       code[pos++] = curr->bound_by->imm.intval | 
         (curr->bound_by->op == CLOSURE_CREATE ? ARG_NEWCLOSURE : 0);
-      for (inst* arg = curr->arglist.first; arg; arg = arg->next) {
+      inst* arg;
+      for (arg = curr->arglist.first; arg; arg = arg->next) {
         assert(arg->op == CLOSURE_REF && arg->bound_by->op == CLOSURE_CREATE);
         code[pos++] = nesting_level(bc, arg->bound_by);
         code[pos++] = arg->bound_by->imm.intval | ARG_NEWCLOSURE;
@@ -665,7 +680,8 @@
 
 void block_free(block b) {
   struct inst* next;
-  for (struct inst* curr = b.first; curr; curr = next) {
+  struct inst* curr;
+  for (curr = b.first; curr; curr = next) {
     next = curr->next;
     inst_free(curr);
   }
--- a/jq/execute.c
+++ b/jq/execute.c
@@ -74,7 +74,8 @@
 
 static stack_ptr frame_get_level(struct jq_state* jq, int level) {
   stack_ptr fr = jq->curr_frame;
-  for (int i=0; i<level; i++) {
+  int i;
+  for (i=0; i<level; i++) {
     struct frame* fp = stack_block(&jq->stk, fr);
     fr = fp->env;
   }
@@ -115,11 +116,12 @@
   new_frame->env = callee.env;
   assert(nargs == new_frame->bc->nclosures);
   union frame_entry* entries = new_frame->entries;
-  for (int i=0; i<nargs; i++) {
+  int i;
+  for (i=0; i<nargs; i++) {
     entries->closure = make_closure(jq, argdef + i * 2);
     entries++;
   }
-  for (int i=0; i<callee.bc->nlocals; i++) {
+  for (i=0; i<callee.bc->nlocals; i++) {
     entries->localvar = jv_invalid();
     entries++;
   }
@@ -132,7 +134,8 @@
   struct frame* fp = frame_current(jq);
   if (stack_pop_will_free(&jq->stk, jq->curr_frame)) {
     int nlocals = fp->bc->nlocals;
-    for (int i=0; i<nlocals; i++) {
+    int i;
+    for (i=0; i<nlocals; i++) {
       jv_free(*frame_local_var(jq, i, 0));
     }
   }
@@ -284,7 +287,8 @@
       if (!backtracking) {
         int stack_in = opdesc->stack_in;
         if (stack_in == -1) stack_in = pc[1];
-        for (int i=0; i<stack_in; i++) {
+        int i;
+        for (i=0; i<stack_in; i++) {
           if (i == 0) {
             param = jq->stk_top;
           } else {
@@ -623,8 +627,9 @@
       int nargs = *pc++;
       jv top = stack_pop(jq);
       jv* in = cfunc_input;
+      int i;
       in[0] = top;
-      for (int i = 1; i < nargs; i++) {
+      for (i = 1; i < nargs; i++) {
         in[i] = stack_pop(jq);
       }
       struct cfunction* function = &frame_current(jq)->bc->globals->cfunctions[*pc++];
@@ -772,7 +777,8 @@
   }
   int nerrors = jq_parse(&locations, &program);
   if (nerrors == 0) {
-    for (int i=0; i<jv_array_length(jv_copy(args)); i++) {
+    int i;
+    for (i=0; i<jv_array_length(jv_copy(args)); i++) {
       jv arg = jv_array_get(jv_copy(args), i);
       jv name = jv_object_get(jv_copy(arg), jv_string("name"));
       jv value = jv_object_get(arg, jv_string("value"));
--- a/jq/jv.c
+++ b/jq/jv.c
@@ -193,7 +193,8 @@
   assert(jv_get_kind(a) == JV_KIND_ARRAY);
   if (jvp_refcnt_dec(a.u.ptr)) {
     jvp_array* array = jvp_array_ptr(a);
-    for (int i=0; i<array->length; i++) {
+    int i;
+    for (i=0; i<array->length; i++) {
       jv_free(array->elements[i]);
     }
     jv_mem_free(array);
@@ -228,7 +229,8 @@
   int pos = i + jvp_array_offset(*a);
   if (pos < array->alloc_length && jvp_refcnt_unshared(a->u.ptr)) {
     // use existing array space
-    for (int j = array->length; j <= pos; j++) {
+    int j;
+    for (j = array->length; j <= pos; j++) {
       array->elements[j] = JV_NULL;
     }
     array->length = imax(pos + 1, array->length);
@@ -260,7 +262,8 @@
   if (jvp_array_ptr(a) == jvp_array_ptr(b) &&
       jvp_array_offset(a) == jvp_array_offset(b)) 
     return 1;
-  for (int i=0; i<jvp_array_length(a); i++) {
+  int i;
+  for (i=0; i<jvp_array_length(a); i++) {
     if (!jv_equal(jv_copy(*jvp_array_read(a, i)), 
                   jv_copy(*jvp_array_read(b, i))))
       return 0;
@@ -330,9 +333,13 @@
   assert(jv_get_kind(b) == JV_KIND_ARRAY);
 
   // FIXME: could be faster
+  jv_array_start();
+  int i;
+  jv elem;
   jv_array_foreach(b, i, elem) {
     a = jv_array_append(a, elem);
   }
+  jv_array_end();
   jv_free(b);
   return a;
 }
@@ -345,20 +352,28 @@
 
 int jv_array_contains(jv a, jv b) {
   int r = 1;
+  jv_array_start();
+  int bi;
+  jv belem;
   jv_array_foreach(b, bi, belem) {
     int ri = 0;
+    jv_array_start();
+    int ai;
+    jv aelem;
     jv_array_foreach(a, ai, aelem) {
       if (jv_contains(aelem, jv_copy(belem))) {
         ri = 1;
         break;
       }
     }
+    jv_array_end();
     jv_free(belem);
     if (!ri) {
       r = 0;
       break;
     }
   }
+  jv_array_end();
   jv_free(a);
   jv_free(b);
   return r;
@@ -367,7 +382,13 @@
 jv jv_array_indexes(jv a, jv b) {
   jv res = jv_array();
   int idx = -1;
+  jv_array_start();
+  int ai;
+  jv aelem;
   jv_array_foreach(a, ai, aelem) {
+    jv_array_start();
+    int bi;
+    jv belem;
     jv_array_foreach(b, bi, belem) {
       // quieten compiler warnings about aelem not being used... by
       // using it
@@ -377,10 +398,12 @@
       else if (bi == 0 && idx == -1)
         idx = ai;
     }
+    jv_array_end();
     if (idx > -1)
       res = jv_array_append(res, jv_number(idx));
     idx = -1;
   }
+  jv_array_end();
   jv_free(a);
   jv_free(b);
   return res;
@@ -524,8 +547,8 @@
   const uint32_t c1 = 0xcc9e2d51;
   const uint32_t c2 = 0x1b873593;
   const uint32_t* blocks = (const uint32_t *)(data + nblocks*4);
-
-  for(int i = -nblocks; i; i++) {
+  int i;
+  for(i = -nblocks; i; i++) {
     uint32_t k1 = blocks[i]; //FIXME: endianness/alignment
     
     k1 *= c1;
@@ -867,7 +890,8 @@
                                  sizeof(struct object_slot) * size +
                                  sizeof(int) * (size * 2));
   obj->refcnt.count = 1;
-  for (int i=0; i<size; i++) {
+  int i;
+  for (i=0; i<size; i++) {
     obj->elements[i].next = i - 1;
     obj->elements[i].string = JV_NULL;
     obj->elements[i].hash = 0;
@@ -875,7 +899,7 @@
   }
   obj->next_free = 0;
   int* hashbuckets = (int*)(&obj->elements[size]);
-  for (int i=0; i<size*2; i++) {
+  for (i=0; i<size*2; i++) {
     hashbuckets[i] = -1;
   }
   jv r = {JV_KIND_OBJECT, 0, 0, size, {&obj->refcnt}};
@@ -917,7 +941,8 @@
 
 static struct object_slot* jvp_object_find_slot(jv object, jv keystr, int* bucket) {
   uint32_t hash = jvp_string_hash(keystr);
-  for (struct object_slot* curr = jvp_object_get_slot(object, *bucket); 
+  struct object_slot* curr;
+  for (curr = jvp_object_get_slot(object, *bucket); 
        curr; 
        curr = jvp_object_next_slot(object, curr)) {
     if (curr->hash == hash && jvp_string_equal(keystr, curr->string)) {
@@ -951,7 +976,8 @@
 static void jvp_object_free(jv o) {
   assert(jv_get_kind(o) == JV_KIND_OBJECT);
   if (jvp_refcnt_dec(o.u.ptr)) {
-    for (int i=0; i<jvp_object_size(o); i++) {
+    int i;
+    for (i=0; i<jvp_object_size(o); i++) {
       struct object_slot* slot = jvp_object_get_slot(o, i);
       if (jv_get_kind(slot->string) != JV_KIND_NULL) {
         jvp_string_free(slot->string);
@@ -967,7 +993,8 @@
   assert(jvp_refcnt_unshared(object.u.ptr));
   int size = jvp_object_size(object);
   jv new_object = jvp_object_new(size * 2);
-  for (int i=0; i<size; i++) {
+  int i;
+  for (i=0; i<size; i++) {
     struct object_slot* slot = jvp_object_get_slot(object, i);
     if (jv_get_kind(slot->string) == JV_KIND_NULL) continue;
     int* new_bucket = jvp_object_find_bucket(new_object, slot->string);
@@ -988,7 +1015,8 @@
 
   jv new_object = jvp_object_new(jvp_object_size(object));
   jvp_object_ptr(new_object)->next_free = jvp_object_ptr(object)->next_free;
-  for (int i=0; i<jvp_object_size(new_object); i++) {
+  int i;
+  for (i=0; i<jvp_object_size(new_object); i++) {
     struct object_slot* old_slot = jvp_object_get_slot(object, i);
     struct object_slot* new_slot = jvp_object_get_slot(new_object, i);
     *new_slot = *old_slot;
@@ -1036,7 +1064,8 @@
   int* bucket = jvp_object_find_bucket(*object, key);
   int* prev_ptr = bucket;
   uint32_t hash = jvp_string_hash(key);
-  for (struct object_slot* curr = jvp_object_get_slot(*object, *bucket); 
+  struct object_slot* curr;
+  for (curr = jvp_object_get_slot(*object, *bucket); 
        curr; 
        curr = jvp_object_next_slot(*object, curr)) {
     if (hash == curr->hash && jvp_string_equal(key, curr->string)) {
@@ -1053,7 +1082,8 @@
 
 static int jvp_object_length(jv object) {
   int n = 0;
-  for (int i=0; i<jvp_object_size(object); i++) {
+  int i;
+  for (i=0; i<jvp_object_size(object); i++) {
     struct object_slot* slot = jvp_object_get_slot(object, i);
     if (jv_get_kind(slot->string) != JV_KIND_NULL) n++;
   }
@@ -1063,7 +1093,8 @@
 static int jvp_object_equal(jv o1, jv o2) {
   int len2 = jvp_object_length(o2);
   int len1 = 0;
-  for (int i=0; i<jvp_object_size(o1); i++) {
+  int i;
+  for (i=0; i<jvp_object_size(o1); i++) {
     struct object_slot* slot = jvp_object_get_slot(o1, i);
     if (jv_get_kind(slot->string) == JV_KIND_NULL) continue;
     jv* slot2 = jvp_object_read(o2, slot->string);
@@ -1125,9 +1156,12 @@
 
 jv jv_object_merge(jv a, jv b) {
   assert(jv_get_kind(a) == JV_KIND_OBJECT);
+  jv_object_start();
+  jv k, v;
   jv_object_foreach(b, k, v) {
     a = jv_object_set(a, k, v);
   }
+  jv_object_end();
   jv_free(b);
   return a;
 }
@@ -1136,6 +1170,8 @@
   assert(jv_get_kind(a) == JV_KIND_OBJECT);
   assert(jv_get_kind(b) == JV_KIND_OBJECT);
 
+  jv_object_start();
+  jv k, v;
   jv_object_foreach(b, k, v) {
     jv elem = jv_object_get(jv_copy(a), jv_copy(k));
     if (jv_is_valid(elem) &&
@@ -1147,6 +1183,7 @@
       a = jv_object_set(a, k, v);
     }
   }
+  jv_object_end();
   jv_free(b);
   return a;
 }
@@ -1156,6 +1193,8 @@
   assert(jv_get_kind(b) == JV_KIND_OBJECT);
   int r = 1;
 
+  jv_object_start();
+  jv key, b_val;
   jv_object_foreach(b, key, b_val) {
     jv a_val = jv_object_get(jv_copy(a), jv_copy(key));
 
@@ -1164,6 +1203,7 @@
 
     if (!r) break;
   }
+  jv_object_end();
 
   jv_free(a);
   jv_free(b);
--- a/jq/jv.h
+++ b/jq/jv.h
@@ -73,13 +73,20 @@
 jv jv_array_slice(jv, int, int);
 jv jv_array_indexes(jv, jv);
 #define jv_array_foreach(a, i, x) \
-  for (int jv_len__ = jv_array_length(jv_copy(a)), i=0, jv_j__ = 1;     \
-       jv_j__; jv_j__ = 0)                                              \
-    for (jv x;                                                          \
+  for (jv_len__ = jv_array_length(jv_copy(a)), i=0, jv_j__ = 1;         \
+       jv_j__; jv_j__ = 0) {                                            \
+    for (;                                                              \
          i < jv_len__ ?                                                 \
            (x = jv_array_get(jv_copy(a), i), 1) : 0;                    \
          i++)
 
+#define jv_array_start() do { \
+    int jv_len__, jv_j__
+
+#define jv_array_end() \
+        } \
+    } while(0)
+
 jv jv_string(const char*);
 jv jv_string_sized(const char*, int);
 jv jv_string_empty(int len);
@@ -113,8 +120,8 @@
 jv jv_object_iter_key(jv, int);
 jv jv_object_iter_value(jv, int);
 #define jv_object_foreach(t, k, v)                                      \
-  for (int jv_i__ = jv_object_iter(t), jv_j__ = 1; jv_j__; jv_j__ = 0)  \
-    for (jv k, v;                                                       \
+  for (jv_i__ = jv_object_iter(t), jv_j__ = 1; jv_j__; jv_j__ = 0) {    \
+    for (;                                                              \
          jv_object_iter_valid((t), jv_i__) ?                            \
            (k = jv_object_iter_key(t, jv_i__),                          \
             v = jv_object_iter_value(t, jv_i__),                        \
@@ -122,7 +129,12 @@
            : 0;                                                         \
          jv_i__ = jv_object_iter_next(t, jv_i__))                       \
  
+#define jv_object_start() do { \
+    int jv_i__, jv_j__
 
+#define jv_object_end() \
+        } \
+    } while(0)
 
 int jv_get_refcnt(jv);
 
--- a/jq/jv_aux.c
+++ b/jq/jv_aux.c
@@ -125,6 +125,7 @@
     int start, end;
     if (parse_slice(t, k, &start, &end)) {
       if (jv_get_kind(v) == JV_KIND_ARRAY) {
+        int i;
         int array_len = jv_array_length(jv_copy(t));
         assert(0 <= start && start <= end && end <= array_len);
         int slice_len = end - start;
@@ -132,18 +133,18 @@
         if (slice_len < insert_len) {
           // array is growing
           int shift = insert_len - slice_len;
-          for (int i = array_len - 1; i >= end; i--) {
+          for (i = array_len - 1; i >= end; i--) {
             t = jv_array_set(t, i + shift, jv_array_get(jv_copy(t), i));
           }
         } else if (slice_len > insert_len) {
           // array is shrinking
           int shift = slice_len - insert_len;
-          for (int i = end; i < array_len; i++) {
+          for (i = end; i < array_len; i++) {
             t = jv_array_set(t, i - shift, jv_array_get(jv_copy(t), i));
           }
           t = jv_array_slice(t, 0, array_len - shift);
         }
-        for (int i=0; i < insert_len; i++) {
+        for (i=0; i < insert_len; i++) {
           t = jv_array_set(t, start + i, jv_array_get(jv_copy(v), i));
         }
         jv_free(v);
@@ -211,6 +212,9 @@
     keys = jv_array();
     jv new_array = jv_array();
     jv starts = jv_array(), ends = jv_array();
+    jv_array_start();
+    int i;
+    jv key;
     jv_array_foreach(orig_keys, i, key) {
       if (jv_get_kind(key) == JV_KIND_NUMBER) {
         keys = jv_array_append(keys, key);
@@ -233,8 +237,12 @@
         goto arr_out;
       }
     }
+    jv_array_end();
 
     int kidx = 0;
+    jv_array_start();
+    int i;
+    jv elem;
     jv_array_foreach(t, i, elem) {
       int del = 0;
       while (kidx < jv_array_length(jv_copy(keys))) {
@@ -247,7 +255,8 @@
         }
         kidx++;
       }
-      for (int sidx=0; !del && sidx<jv_array_length(jv_copy(starts)); sidx++) {
+      int sidx;
+      for (sidx=0; !del && sidx<jv_array_length(jv_copy(starts)); sidx++) {
         if ((int)jv_number_value(jv_array_get(jv_copy(starts), sidx)) <= i &&
             i < (int)jv_number_value(jv_array_get(jv_copy(ends), sidx))) {
           del = 1;
@@ -258,6 +267,7 @@
       else
         jv_free(elem);
     }
+    jv_array_end();
   arr_out:
     jv_free(starts);
     jv_free(ends);
@@ -265,6 +275,9 @@
     jv_free(t);
     t = new_array;
   } else if (jv_get_kind(t) == JV_KIND_OBJECT) {
+    jv_array_start();
+    int i;
+    jv k;
     jv_array_foreach(keys, i, k) {
       if (jv_get_kind(k) != JV_KIND_STRING) {
         jv_free(t);
@@ -275,6 +288,7 @@
       }
       t = jv_object_delete(t, k);      
     }
+    jv_array_end();
   } else {
     jv err = jv_invalid_with_msg(jv_string_fmt("Cannot delete fields from %s",
                                                jv_kind_name(jv_get_kind(t))));
@@ -330,7 +344,8 @@
 // assumes paths is a sorted array of arrays
 static jv delpaths_sorted(jv object, jv paths, int start) {
   jv delkeys = jv_array();
-  for (int i=0; i<jv_array_length(jv_copy(paths));) {
+  int i;
+  for (i=0; i<jv_array_length(jv_copy(paths));) {
     int j = i;
     assert(jv_array_length(jv_array_get(jv_copy(paths), i)) > start);
     int delkey = jv_array_length(jv_array_get(jv_copy(paths), i)) == start + 1;
@@ -377,6 +392,9 @@
 
 jv jv_delpaths(jv object, jv paths) {
   paths = jv_sort(paths, jv_copy(paths));
+  jv_array_start();
+  int i;
+  jv elem;
   jv_array_foreach(paths, i, elem) {
     if (jv_get_kind(elem) != JV_KIND_ARRAY) {
       jv_free(object);
@@ -388,6 +406,7 @@
     }
     jv_free(elem);
   }
+  jv_array_end();
   if (jv_array_length(jv_copy(paths)) == 0) {
     // nothing is being deleted
     jv_free(paths);
@@ -419,13 +438,17 @@
     int nkeys = jv_object_length(jv_copy(x));
     jv* keys = jv_mem_alloc(sizeof(jv) * nkeys);
     int kidx = 0;
+    jv_object_start();
+    jv key, value;
     jv_object_foreach(x, key, value) {
       keys[kidx++] = key;
       jv_free(value);
     }
+    jv_object_end();
     qsort(keys, nkeys, sizeof(jv), string_cmp);
     jv answer = jv_array_sized(nkeys);
-    for (int i = 0; i<nkeys; i++) {
+    int i;
+    for (i = 0; i<nkeys; i++) {
       answer = jv_array_append(answer, keys[i]);
     }
     jv_mem_free(keys);
@@ -434,7 +457,8 @@
   } else if (jv_get_kind(x) == JV_KIND_ARRAY) {
     int n = jv_array_length(x);
     jv answer = jv_array();
-    for (int i=0; i<n; i++){
+    int i;
+    for (i=0; i<n; i++){
       answer = jv_array_set(answer, i, jv_number(i));
     }
     return answer;
@@ -502,12 +526,16 @@
     jv keys_b = jv_keys(jv_copy(b));
     r = jv_cmp(jv_copy(keys_a), keys_b);
     if (r == 0) {
+      jv_array_start();
+      int i;
+      jv key;
       jv_array_foreach(keys_a, i, key) {
         jv xa = jv_object_get(jv_copy(a), jv_copy(key));
         jv xb = jv_object_get(jv_copy(b), key);
         r = jv_cmp(xa, xb);
         if (r) break;
       }
+      jv_array_end();
     }
     jv_free(keys_a);
     break;
@@ -539,7 +567,8 @@
   assert(jv_array_length(jv_copy(objects)) == jv_array_length(jv_copy(keys)));
   int n = jv_array_length(jv_copy(objects));
   struct sort_entry* entries = jv_mem_alloc(sizeof(struct sort_entry) * n);
-  for (int i=0; i<n; i++) {
+  int i;
+  for (i=0; i<n; i++) {
     entries[i].object = jv_array_get(jv_copy(objects), i);
     entries[i].key = jv_array_get(jv_copy(keys), i);
   }
@@ -556,7 +585,8 @@
   int n = jv_array_length(jv_copy(objects));
   struct sort_entry* entries = sort_items(objects, keys);
   jv ret = jv_array();
-  for (int i=0; i<n; i++) {
+  int i;
+  for (i=0; i<n; i++) {
     jv_free(entries[i].key);
     ret = jv_array_set(ret, i, entries[i].object);
   }
@@ -574,7 +604,8 @@
   if (n > 0) {
     jv curr_key = entries[0].key;
     jv group = jv_array_append(jv_array(), entries[0].object);
-    for (int i = 1; i < n; i++) {
+    int i;
+    for (i = 1; i < n; i++) {
       if (jv_equal(jv_copy(curr_key), jv_copy(entries[i].key))) {
         jv_free(entries[i].key);
       } else {
--- a/jq/jv_parse.c
+++ b/jq/jv_parse.c
@@ -62,7 +62,8 @@
 
 static void parser_free(struct jv_parser* p) {
   jv_free(p->next);
-  for (int i=0; i<p->stackpos; i++) 
+  int i;
+  for (i=0; i<p->stackpos; i++) 
     jv_free(p->stack[i]);
   jv_mem_free(p->stack);
   jv_mem_free(p->tokenbuf);
@@ -182,7 +183,8 @@
 
 static int unhex4(char* hex) {
   int r = 0;
-  for (int i=0; i<4; i++) {
+  int i;
+  for (i=0; i<4; i++) {
     char c = *hex++;
     int n;
     if ('0' <= c && c <= '9') n = c - '0';
@@ -265,7 +267,8 @@
   }
   if (pattern) {
     if (p->tokenpos != plen) return "Invalid literal";
-    for (int i=0; i<plen; i++) 
+    int i;
+    for (i=0; i<plen; i++) 
       if (p->tokenbuf[i] != pattern[i])
         return "Invalid literal";
     TRY(value(p, v));
--- a/jq/jv_print.c
+++ b/jq/jv_print.c
@@ -116,7 +116,8 @@
   char buf[JVP_DTOA_FMT_MAX_LEN];
   const char* colour = 0;
   if (flags & JV_PRINT_COLOUR) {
-    for (unsigned i=0; i<sizeof(colour_kinds)/sizeof(colour_kinds[0]); i++) {
+      unsigned i;
+    for (i=0; i<sizeof(colour_kinds)/sizeof(colour_kinds[0]); i++) {
       if (jv_get_kind(x) == colour_kinds[i]) {
         colour = colours[i];
         put_str(colour, F, S);
@@ -164,6 +165,9 @@
       put_char('\n', F, S);
       put_space(indent+INDENT, F, S);
     }
+    jv_array_start();
+    int i;
+    jv elem;
     jv_array_foreach(x, i, elem) {
       if (i!=0) {
         if (flags & JV_PRINT_PRETTY) {
@@ -176,6 +180,7 @@
       jv_dump_term(C, elem, flags, indent + INDENT, F, S);
       if (colour) put_str(colour, F, S);
     }
+    jv_array_end();
     if (flags & JV_PRINT_PRETTY) {
       put_char('\n', F, S);
       put_space(indent, F, S);
--- a/jq/jv_unicode.c
+++ b/jq/jv_unicode.c
@@ -23,7 +23,8 @@
     length = end - in;
   } else {
     codepoint = ((unsigned)in[0]) & utf8_coding_bits[first];
-    for (int i=1; i<length; i++) {
+    int i;
+    for (i=1; i<length; i++) {
       unsigned ch = (unsigned char)in[i];
       if (utf8_coding_length[ch] != UTF8_CONTINUATION_BYTE){
         /* Invalid UTF8 sequence - not followed by the right number of continuation bytes */
--- a/jq/locfile.c
+++ b/jq/locfile.c
@@ -14,13 +14,14 @@
   l->data = data;
   l->length = length;
   l->nlines = 1;
-  for (int i=0; i<length; i++) {
+  int i;
+  for (i=0; i<length; i++) {
     if (data[i] == '\n') l->nlines++;
   }
   l->linemap = jv_mem_alloc(sizeof(int) * (l->nlines + 1));
   l->linemap[0] = 0;
   int line = 1;
-  for (int i=0; i<length; i++) {
+  for (i=0; i<length; i++) {
     if (data[i] == '\n') {
       l->linemap[line] = i+1;   // at start of line, not of \n
       line++;
--- a/jq/main.c
+++ b/jq/main.c
@@ -254,12 +254,9 @@
       ret = 2;
       goto out;
     }
-fprintf(stderr, "-- c0\n");
     compiled = jq_compile_args(jq, jv_string_value(data), program_arguments);
     jv_free(data);
   } else {
-fprintf(stderr, "-- c1\n");
-fprintf(stderr, "-- program = [%s]\n", program);
     compiled = jq_compile_args(jq, program, program_arguments);
   }
   if (!compiled){
@@ -273,7 +270,6 @@
   }
 
   if (options & PROVIDE_NULL) {
-fprintf(stderr, "-- 1\n");
     ret = process(jq, jv_null(), jq_flags);
   } else {
     jv slurped;
@@ -294,19 +290,16 @@
             slurped = jv_string_concat(slurped, jv_string(buf));
           } else {
             if (buf[len-1] == '\n') buf[len-1] = 0;
-fprintf(stderr, "-- 2\n");
             ret = process(jq, jv_string(buf), jq_flags);
           }
         }
       } else {
-fprintf(stderr, "-- buf: [%s]\n", buf);
         jv_parser_set_buf(parser, buf, strlen(buf), !feof(stdin));
         jv value;
         while (jv_is_valid((value = jv_parser_next(parser)))) {
           if (options & SLURP) {
             slurped = jv_array_append(slurped, value);
           } else {
-fprintf(stderr, "-- 3\n");
             ret = process(jq, value, jq_flags);
           }
         }
@@ -325,7 +318,6 @@
     if (ret != 0)
       goto out;
     if (options & SLURP) {
-fprintf(stderr, "-- 4\n");
       ret = process(jq, slurped, jq_flags);
     }
   }
